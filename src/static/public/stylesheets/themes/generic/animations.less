@import 'color-rules.less';

/* Rectangle Out */
.hvr-rectangle-out {
  display: inline-block;
  vertical-align: middle;
  -webkit-transform: perspective(1px) translateZ(0);
  transform: perspective(1px) translateZ(0);
  box-shadow: 0 0 1px rgba(0, 0, 0, 0);
  position: relative;
  background: @link-bg-color;
  -webkit-transition-property: color;
  transition-property: color;
  -webkit-transition-duration: 0.3s;
  transition-duration: 0.3s;
}
.hvr-rectangle-out:before {
  content: "";
  position: absolute;
  z-index: -1;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: @link-hover-color;
  -webkit-transform: scale(0);
  transform: scale(0);
  -webkit-transition-property: transform;
  transition-property: transform;
  -webkit-transition-duration: 0.3s;
  transition-duration: 0.3s;
  -webkit-transition-timing-function: ease-out;
  transition-timing-function: ease-out;
}
.hvr-rectangle-out:hover, .hvr-rectangle-out:focus, .hvr-rectangle-out:active {
  color: white;
}
.hvr-rectangle-out:hover:before, .hvr-rectangle-out:focus:before, .hvr-rectangle-out:active:before {
  -webkit-transform: scale(1);
  transform: scale(1);
}


/* Sweep To Right */
.sweep-to-right(@activeColor, @mediumDuration) {
  .hacks();
  position: relative;
  .prefixed(transition-property, color);
  .prefixed(transition-duration, @mediumDuration);

  &:before {
    content: "";
    position: absolute;
    z-index: -1;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: @activeColor;
    .prefixed(transform, scaleX(0));
    .prefixed(transform-origin, 0 50%);
    .prefixed(transition-property, transform);
    .prefixed(transition-duration, @mediumDuration);
    .prefixed(transition-timing-function, ease-out);
  }

  &:hover,
  &:focus,
  &:active {
    color: white;

    &:before {
      .prefixed(transform, scaleX(1));
    }
  }
}






.hardwareAccel() {
  // Improve performance on mobile/tablet devices
  // Perspective reduces blurryness of text in Chrome
  .prefixed(transform, perspective(1px) translateZ(0));
}

.improveAntiAlias() {
  // Improve aliasing on mobile/tablet devices
  box-shadow: 0 0 1px rgba(0, 0, 0, 0);
}

.forceBlockLevel() {
  // Transforms need to be block-level to work
  display: inline-block;
  vertical-align: middle;
}

.hacks() {
  .forceBlockLevel();
  .hardwareAccel();
  .improveAntiAlias();
}


// prefix declarations
.prefixed(@property, @value) {
  & when (@webkit = true) {
    -webkit-@{property}: @value;
  }

  & when (@moz = true) {
    -moz-@{property}: @value;
  }

  & when (@ms = true) {
    -ms-@{property}: @value;
  }

  & when (@o = true) {
    -o-@{property}: @value;
  }

    @{property}: @value;
}

// prefix keyframes
.keyframes(@name; @content) {
  & when (@webkit = true) {
    @-webkit-keyframes @name {
      @content();
    }
  }

  & when (@moz = true) {
    @-moz-keyframes @name {
      @content();
    }
  }

  & when (@ms = true) {
    @-ms-keyframes @name {
      @content();
    }
  }

  & when (@o = true) {
    @-o-keyframes @name {
      @content();
    }
  }

  @keyframes @name {
    @content();
  }
}

// DEFAULT OPTIONS

// Prefix for Hover class names
@nameSpace "hvr";

// Durations
@fastDuration: .1s;
@mediumDuration: .3s;
@slowDuration: .5s;

// Colors
@primaryColor: #e1e1e1;
@secondaryColor: #666;
@highlightColor: #ccc;
@activeColor: #2098D1;
@shadowColor: rgba(0, 0, 0, .6);

// Speech bubbles options
@tipWidth: 10px;  //the width of the speech bubble tip
@tipHeight: 10px; //the height of the speech bubble tip
@tipColor: @primaryColor;

// Arrows options
@spaceBetweenTextAndArrows: 2.2em;

// Curl dimensions
@curlWidth: 25px;
@curlHeight: 25px;

// Curl colors
@revealAreaColor: white;    // reveal area behind the curl
@curlLineColor: #aaa;       // crease line
@curlTransitionColor: #ccc;	// color transitioning from crease line to final color
@curlLastColor: white;		// final color of the back of the curl

// Browser Prefixes - Which CSS prefixes should be used?
@webkit: true;
@moz: false;
@ms: false;
@o: false;

// Compile with or without classes
@includeClasses: true;

